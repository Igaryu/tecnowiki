
<h1 class="sectionedit1" id="gestione_delle_transazioni">Gestione delle Transazioni</h1>
<div class="level1">


<hr />

<p>
Le transazioni SQL sono insiemi di istruzioni che devono essere trattati come delle unità atomiche, cioè non scomponibili nelle singole istruzioni da cui sono formate. Grazie a tale atomicità le transazioni permettono di eseguire operazioni complesse sul database mantenendone l&#039;integrità. Infatti una transazione viene eseguita con successo se, e solo se, tutte le operazioni che la compongono terminano con successo. In caso contrario, cioè se una delle operazioni fallisce, o se la transazione viene esplicitamente annullata, tutte le operazioni precedenti vengono annullate anch&#039;esse. Le operazioni di una transazione non hanno alcun effetto sul database fino a quando la transazione non viene completata con successo.
</p>

<p>
Dal momento che ad un database possono accedere più utenti contemporaneamente, in ogni istante potremmo avere più transazioni che manipolano il database in maniera concorrente. Lo standard SQL prevede che normalmente le transazioni debbano essere eseguite nel “livello di isolamento serializzabile” (isolation level SERIALIZABLE), cioè in una modalità di esecuzione che garantisca la “serializzabilità” delle transazioni. Il fatto che le transazioni siano serializzabili significa che il loro effetto complessivo sul database è quello che si otterrebbe se esse venissero eseguite in maniera non concorrente l&#039;una di seguito all&#039;altra. Nel linguaggio SQL, standard, non esiste un&#039;istruzione che faccia iniziare esplicitamente una transazione. 
</p>

<p>
Le istruzioni vengono divise in due classi: 
</p>
<ul>
<li class="level1"><div class="li">quelle che possono iniziare una transazione </div>
</li>
<li class="level1"><div class="li">e quelle che non la fanno iniziare. </div>
</li>
</ul>

<p>
Nel momento in cui si cerca di eseguire un&#039;istruzione della prima classe, se non è già in corso una transazione, ne viene cominciata una. La transazione continua fino a quando una delle istruzioni fallisce, causando l&#039;annullamento dell&#039;intera transazione, o se vengono eseguite le istruzioni COMMIT WORK o ROLLBACK WORK.
</p>

<p>
L&#039;istruzione COMMIT WORK termina la transazione confermandola, rendendo quindi definitivi gli effetti delle sue istruzioni sul database. L&#039;istruzione ROLLBACK WORK invece la termina annullandola. 
</p>

<p>
Spesso i DBMS che si trovano in commercio implementano la gestione delle transazioni in maniera differente da quanto previsto dallo standard (almeno nelle loro impostazioni di default). In tal caso, di solito è previsto un comando che inizia esplicitamente una transazione (BEGIN TRANSACTION, START WORK o altro). 
</p>

<p>
Se una transazione non è stata iniziata esplicitamente, le singole istruzioni ne compongono una ciascuna. Per capire meglio quali potrebbero essere le conseguenze della manipolazione concorrente dei dati di un database, senza l&#039;utilizzo delle transazioni, vediamone un esempio: supponiamo di avere un database con il quale gestiamo gli ordini dei prodotti che vendiamo. In particolare, quando un cliente ci sottopone una richiesta per un prodotto, ne verifichiamo la disponibilità e, nel caso in cui possiamo soddisfare l&#039;ordine, sottraiamo alla quantità in giacenza, la quantità che ci è stata richiesta. Traducendo tutto ciò in SQL, otteniamo la quantità in giacenza con l&#039;istruzione (istruzione A):
</p>
<pre class="code">
SELECT giacenza FROM prodotti 
	WHERE prodottoID=1453;</pre>

<p>
L&#039;aggiornamento della giacenza, una volta verificata la disponibilità, è ottenuta dalla seguente istruzione (istruzione B):
</p>
<pre class="code">
UPDATE prodotti
	SET giacenza=giacenza-1 
	WHERE prodottoID=1453;</pre>

<p>
Se due utenti cercano di eseguire questa operazione, senza che le due istruzioni che la compongono siano state raggruppate in una transazione, potrebbe accadere che le istruzioni vengano eseguite nel seguente ordine e con i risultati seguenti :
</p>
<ol>
<li class="level1"><div class="li">Istruzione A eseguita dall&#039;utente 1: viene restituita una giacenza del prodotto pari a 1, quindi l&#039;ordine verrà approvato.</div>
</li>
<li class="level0"><div class="li">Istruzione A eseguita dall&#039;utente 2: come prima la giacenza è 1 e anche in questo caso l&#039;ordine verrà approvato.</div>
</li>
<li class="level0"><div class="li">Istruzione B eseguita dall&#039;utente 1: a questo punto nel database la giacenza per il prodotto vale 0.</div>
</li>
<li class="level0"><div class="li">Istruzione B eseguita dall&#039;utente 2: ora la giacenza vale -1, che è ovviamente un valore errato.</div>
</li>
</ol>

<p>
Come si vede, il risultato finale è che uno dei due clienti non potrà ricevere (almeno non subito) la merce, dato che non ne avevamo in giacenza una quantità sufficiente per entrambi i clienti.
</p>

<p>
Se le due istruzioni fossero state inserite in una transazione, ad esempio:
</p>
<pre class="code">
BEGING (oppure START TRANSACTION) 
	UPDATE prodotti
		SET giacenza=giacenza-1 
		WHERE prodottoID=1453;
COMMIT;</pre>

<p>
il problema non sarebbe sorto, dato che la transazione del secondo utente non avrebbe potuto leggere il valore della giacenza, fino a quando non fosse stata completata la transazione del primo utente. Solo a quel punto, la giacenza avrebbe avuto valore 0 e l&#039;ordine non sarebbe stato, erratamente, approvato.
</p>

<p>
Alcune precisazioni:
1. la transazione, in MariaDB, si avvia con <code>START TRANSACTION;</code> <strong>oppure</strong> con <code>BEGIN;</code>: non viene accettato <code>BEGIN TRANSACTION</code> ;
2. la transazione viene accettata,  e resa permanente, con il comando <code>COMMIT;</code>. Chiudere la connessione al DB, senza aver eseguito il <code>COMMIT;</code> renderà nulla la transazione;
3. Fino a che la connessione con il DB non viene chiusa o non viene eseguito il comando <code>ROLLBACK;</code>, la transizione resta valida, ma non viene rilasciato il <code>LOCK</code> alla tabella in questione: per annullare <strong>correttamente</strong> una transizione <strong>non si deve troncare la connessione con il DB</strong>, ma eseguire il comando <code>ROLLBACK;</code> e poi chiudere la connessione.
</p>

<p>
<a href="https://www.html.it/pag/31729/utilizzo-multiutente-di-un-database/" class="urlextern" title="https://www.html.it/pag/31729/utilizzo-multiutente-di-un-database/" rel="ugc nofollow">Utilizzo multiutente di un database</a>
</p>
<hr />
<ul>
<li class="level1"><div class="li"> <a href="/doku.php?id=sql:istruzioni_varie" class="wikilink1" title="sql:istruzioni_varie" data-wiki-id="sql:istruzioni_varie">Torna a radice docs di SQL</a><br/>
</div>
</li>
<li class="level1"><div class="li"> <a href="/doku.php?id=tecno:start" class="wikilink1" title="tecno:start" data-wiki-id="tecno:start">Benvenuti nel sito di memoria tecnica di Joe</a><br/>
</div>
</li>
</ul>

<p>
 — <em><a href="mailto:&#106;&#99;&#117;&#114;&#116;&#111;&#64;&#106;&#111;&#101;&#46;&#118;&#114;&#46;&#105;&#116;" class="mail" title="&#106;&#99;&#117;&#114;&#116;&#111;&#64;&#106;&#111;&#101;&#46;&#118;&#114;&#46;&#105;&#116;">Joseph Curto</a> 2023/07/24 15:28</em> — Ultima modifica: 2023/07/26 09:44 
</p>

</div>
